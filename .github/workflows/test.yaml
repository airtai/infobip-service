name: Test

on:
  push:
   branches:
     - main
     - dev
  pull_request:
    types: [opened, synchronize]
  merge_group:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PROD_CONFIG: ${{ secrets.PROD_CONFIG }}
  STAGING_CONFIG: ${{ secrets.STAGING_CONFIG }}

jobs:
  static_analysis:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install Dependencies and library
        shell: bash
        run: |
          set -ux
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run ruff
        shell: bash
        run: ruff infobip_service

      - name: Run mypy
        shell: bash
        run: mypy infobip_service

      - name: Run bandit
        shell: bash
        run: bandit -c pyproject.toml -r infobip_service

      - name: Run Semgrep
        shell: bash
        run: semgrep scan --config auto --error

  test:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      fail-fast: false
    services:
      kafka:
        image: bitnami/kafka:3.5.0
        ports:
          - 9092:9092
        env:
          KAFKA_ENABLE_KRAFT: "true"
          KAFKA_CFG_NODE_ID: "1"
          KAFKA_CFG_PROCESS_ROLES: "broker,controller"
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
          KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
          KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://127.0.0.1:9092"
          KAFKA_BROKER_ID: "1"
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
          ALLOW_PLAINTEXT_LISTENER: "true"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-test-v03
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install .[dev]
      - run: mkdir coverage
      - name: Test
        run: bash scripts/test.sh
        env:
          COVERAGE_FILE: coverage/.coverage.${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.pydantic-version }}
          CONTEXT: ${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.pydantic-version }}
      - name: Store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: .coverage.${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.pydantic-version }}
          path: coverage
          if-no-files-found: error

  test-macos-latest:
    if: github.event.pull_request.draft == false
    runs-on: macos-latest
    services:
      kafka:
        image: bitnami/kafka:3.5.0
        ports:
          - 9092:9092
        env:
          KAFKA_ENABLE_KRAFT: "true"
          KAFKA_CFG_NODE_ID: "1"
          KAFKA_CFG_PROCESS_ROLES: "broker,controller"
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
          KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
          KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://127.0.0.1:9092"
          KAFKA_BROKER_ID: "1"
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
          ALLOW_PLAINTEXT_LISTENER: "true"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install .[dev]
      - name: Test
        run: bash scripts/test.sh

  test-windows-latest:
    if: github.event.pull_request.draft == false
    runs-on: windows-latest
    services:
      kafka:
        image: bitnami/kafka:3.5.0
        ports:
          - 9092:9092
        env:
          KAFKA_ENABLE_KRAFT: "true"
          KAFKA_CFG_NODE_ID: "1"
          KAFKA_CFG_PROCESS_ROLES: "broker,controller"
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
          KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
          KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://127.0.0.1:9092"
          KAFKA_BROKER_ID: "1"
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
          ALLOW_PLAINTEXT_LISTENER: "true"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: pyproject.toml
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install .[dev]
      - name: Test
        run: bash scripts/test.sh

  coverage-combine:
    if: github.event.pull_request.draft == false
    needs:
      - test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
          cache: "pip"
          cache-dependency-path: pyproject.toml

      - name: Get coverage files
        uses: actions/download-artifact@v4
        with:
          pattern: .coverage*
          path: coverage
          merge-multiple: true

      - run: pip install coverage[toml]

      - run: ls -la coverage
      - run: coverage combine coverage
      - run: coverage report
      - run: coverage html --show-contexts --title "Infobip Service coverage for ${{ github.sha }}"

      - name: Store coverage html
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

  # https://github.com/marketplace/actions/alls-green#why
  check: # This job does nothing and is only used for the branch protection
    if: github.event.pull_request.draft == false

    needs:
      - static_analysis
      - coverage-combine
      - test-macos-latest
      - test-windows-latest
    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1 # nosemgrep
        with:
          jobs: ${{ toJSON(needs) }}

  docker_build_push:
    runs-on: ubuntu-22.04
    needs: [check]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master # nosemgrep: yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-pinned-to-commit-sha
        with:
          overprovision-lvm: 'true'
          # root-reserve-mb: 33792
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.deb
      - run: sudo dpkg -i trivy_0.18.3_Linux-64bit.deb
      # - run: docker pull ghcr.io/$GITHUB_REPOSITORY:$GITHUB_REF_NAME || docker pull ghcr.io/$GITHUB_REPOSITORY:dev || true
      - run: bash ./scripts/build_docker.sh
      # - run: bash ./scripts/check_docker.sh
      - name: Push only if branch name is main or dev
        if: github.ref_name == 'main' || github.ref_name == 'dev'
        run: docker push ghcr.io/$GITHUB_REPOSITORY --all-tags
